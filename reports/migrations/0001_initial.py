# Generated by Django 3.2.2 on 2021-05-11 12:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assessment_Criteria',
            fields=[
                ('criteria_name', models.CharField(max_length=20, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_code', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('program_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('program_span', models.IntegerField(validators=[django.core.validators.MaxValueValidator(4), django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role', models.CharField(max_length=30, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('regno', models.CharField(max_length=13, primary_key=True, serialize=False)),
                ('program', models.ForeignKey(on_delete=models.SET('empty'), related_name='program', to='reports.program')),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
            },
        ),
        migrations.CreateModel(
            name='UE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(max_length=30)),
                ('academic_year', models.CharField(max_length=5)),
                ('date_taken', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('total_mark', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Total marks')),
                ('number_of_questions', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ue', to='reports.course')),
            ],
            options={
                'unique_together': {('course', 'exam_type', 'academic_year', 'date_taken', 'total_mark', 'number_of_questions')},
            },
        ),
        migrations.CreateModel(
            name='Program_Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_of_study', models.IntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reports.course')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reports.program')),
            ],
            options={
                'unique_together': {('course', 'program', 'year_of_study')},
            },
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.ForeignKey(on_delete=models.SET('empty'), related_name='lecturer', to='reports.role')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'lecturer',
                'verbose_name_plural': 'lecturers',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='program',
            field=models.ManyToManyField(through='reports.Program_Course', to='reports.Program'),
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(max_length=5)),
                ('date_taken', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('total_mark', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Total marks')),
                ('number_of_questions', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('contribution', models.IntegerField(validators=[django.core.validators.MaxValueValidator(40), django.core.validators.MinValueValidator(0)], verbose_name='Contribution in Percentage')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment', to='reports.course')),
                ('criteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment', to='reports.assessment_criteria')),
            ],
            options={
                'unique_together': {('course', 'contribution', 'criteria', 'academic_year', 'date_taken', 'total_mark', 'number_of_questions')},
            },
        ),
        migrations.CreateModel(
            name='UE_Results',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('total_score', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('question_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='reports.student')),
                ('ue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='reports.ue')),
            ],
            options={
                'unique_together': {('score', 'total_score', 'question_number', 'student', 'ue')},
            },
        ),
        migrations.CreateModel(
            name='Lecture_Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(max_length=5)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer', to='reports.course')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='reports.lecturer')),
            ],
            options={
                'unique_together': {('lecturer', 'course', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='Assessment_Results',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('total_score', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('question_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='reports.assessment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_result', to='reports.student')),
            ],
            options={
                'unique_together': {('score', 'total_score', 'question_number', 'student', 'assessment')},
            },
        ),
    ]
